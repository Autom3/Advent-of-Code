const input = require('fs').readFileSync('input.txt', 'utf-8')

console.log((parsed => (parsed.reduce((acc, [xs, ys, xb, yb]) => Math.abs(yb - ys) + Math.abs(xb - xs) - Math.abs(2000000 - ys) <= 0 ? acc : [...acc, [xs - (Math.abs(yb - ys) + Math.abs(xb - xs) - Math.abs(2000000 - ys)), xs + (Math.abs(yb - ys) + Math.abs(xb - xs) - Math.abs(2000000 - ys))]], []).sort(([xa1, xa2], [xb1, xb2]) => xa1 === xb1 ? xa2 - xb2 : xa1 - xb1).reduce((acc, [x1, x2]) => acc.length > 0 && x1 <= acc.at(-1)[1] ? [...acc.slice(0, -1), [acc.at(-1)[0], Math.max(acc.at(-1)[1], x2)]] : [...acc, [x1, x2]], []).reduce((acc, [xMin, xMax]) => acc + xMax + 1 - xMin, 0)) - new Set(parsed.filter(([_, __, ___, yb]) => yb === 2000000).map(([_, __, ___, yb]) => yb)).size)(input.trim().split('\n').map(line => line.match(/^Sensor at x=([^,]+), y=([^:]+): closest beacon is at x=([^,]+), y=(.*)$/).slice(1, 5).map(Number))))

console.log((parsed => Array(2 * 2000000).fill().map((_, yCounter) => [yCounter, parsed.reduce((acc, [xs, ys, xb, yb]) => Math.abs(yb - ys) + Math.abs(xb - xs) - Math.abs(yCounter - ys) <= 0 ? acc : [...acc, [xs - (Math.abs(yb - ys) + Math.abs(xb - xs) - Math.abs(yCounter - ys)), xs + (Math.abs(yb - ys) + Math.abs(xb - xs) - Math.abs(yCounter - ys))]], []).sort(([xa1, xa2], [xb1, xb2]) => xa1 === xb1 ? xa2 - xb2 : xa1 - xb1).reduce((acc, [x1, x2]) => acc.length > 0 && x1 <= 1 + acc.at(-1)[1] ? [...acc.slice(0, -1), [Math.max(acc.at(-1)[0], 0), Math.min(Math.max(acc.at(-1)[1], x2), 2 * 2000000)]] : [...acc, [Math.max(x1, 0), Math.min(x2, 2 * 2000000)]], [])]).filter(([_, l]) => l.length > 1).map(([y, [[_, x]]]) => y + (x + 1) * 2 * 2000000)[0])(input.trim().split('\n').map(line => line.match(/^Sensor at x=([^,]+), y=([^:]+): closest beacon is at x=([^,]+), y=(.*)$/).slice(1, 5).map(Number))))
