const input = require('fs').readFileSync('input.txt', 'utf-8')

const inspects = Array(input.trim().split('\n\n').length).fill(0)
console.log((rounds => rounds.reduce((acc, round) => round.map((items, i) => acc[i] + items.length), Array(rounds[0].length).fill(0)))((monkeys => Array(20).fill().map(() => monkeys.map(({monkey, startingItems, operation, test, ifTrue, ifFalse}) => startingItems.splice(0, startingItems.length).map(item => Math.floor(operation(item) / 3)).map(n => monkeys[test(n) ? ifTrue : ifFalse].startingItems.push(n)).forEach(n => inspects[monkey]++)).map((_, i) => monkeys[i].startingItems.slice())))(input.trim().split('\n\n').map(m => m.split('\n').map(line => line.split(/: ?/))).map(([[monkeyNumber], [_0, startingItems], [_1, operation], [_2, test], [_3, ifTrue], [_4, ifFalse]]) => ({ monkey: Number(monkeyNumber.split(' ')[1]), startingItems: startingItems.split(', ').map(Number), operation: operation.split(' = ')[1].split(' '), test: Number(test.split(' ').at(-1)), ifTrue: Number(ifTrue.split(' ').at(-1)), ifFalse: Number(ifFalse.split(' ').at(-1))})).map(({monkey, startingItems, operation, test, ifTrue, ifFalse}) => ({monkey, startingItems, operation: old => operation[1] === '+' ? old + (operation[2] === 'old' ? old : Number(operation[2])) : old * (operation[2] === 'old' ? old : Number(operation[2])), test: n => n % test === 0, ifTrue, ifFalse})))), inspects.slice().sort((a, b) => a - b).slice(-2).reduce((a, b) => a * b))

inspects.forEach((_, i) => inspects[i] = 0)
const maxPossible = input.trim().split('\n\n').reduce((acc, m) => acc * m.split('\n')[3].split(' ').at(-1), 1)
console.log((rounds => rounds.reduce((acc, round) => round.map((items, i) => acc[i] + items.length), Array(rounds[0].length).fill(0)))((monkeys => Array(10000).fill().map(() => monkeys.map(({monkey, startingItems, operation, test, ifTrue, ifFalse}) => startingItems.splice(0, startingItems.length).map(item => operation(item) % maxPossible).map(n => monkeys[test(n) ? ifTrue : ifFalse].startingItems.push(n)).forEach(n => inspects[monkey]++)).map((_, i) => monkeys[i].startingItems.slice())))(input.trim().split('\n\n').map(m => m.split('\n').map(line => line.split(/: ?/))).map(([[monkeyNumber], [_0, startingItems], [_1, operation], [_2, test], [_3, ifTrue], [_4, ifFalse]]) => ({ monkey: Number(monkeyNumber.split(' ')[1]), startingItems: startingItems.split(', ').map(Number), operation: operation.split(' = ')[1].split(' '), test: Number(test.split(' ').at(-1)), ifTrue: Number(ifTrue.split(' ').at(-1)), ifFalse: Number(ifFalse.split(' ').at(-1))})).map(({monkey, startingItems, operation, test, ifTrue, ifFalse}) => ({monkey, startingItems, operation: old => operation[1] === '+' ? old + (operation[2] === 'old' ? old : Number(operation[2])) : old * (operation[2] === 'old' ? old : Number(operation[2])), test: n => n % test === 0, ifTrue, ifFalse})))), inspects, inspects.slice().sort((a, b) => a - b).slice(-2).reduce((a, b) => a * b))
