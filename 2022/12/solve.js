const input = require('fs').readFileSync('input.txt', 'utf-8')

console.log((({grid, start, end, fun}) => {grid[start[0]][start[1]] = { height: grid[start[0]][start[1]], distance: 0, x: start[0], y: start[1] }; return fun(grid[start[0]][start[1]], grid, [], end, fun)})(input.trim().split('\n').map(line => line.split('')).reduce((acc, line, y) => ({ grid: [...acc.grid, line.map(char => char === 'S' ? 0 : char === 'E' ? 'z'.charCodeAt(0) - 'a'.charCodeAt(0) : char.charCodeAt(0) - 'a'.charCodeAt(0))], start: acc.start === undefined ? (line.indexOf('S') >= 0 ? [line.indexOf('S'), y] : undefined) : acc.start, end: acc.end === undefined ? (line.indexOf('E') >= 0 ? [line.indexOf('E'), y] : undefined) : acc.end, fun: acc.fun }), { grid: [], fun: ({height, distance, x, y}, grid, stack, [endX, endY], fun) => { stack.push(...[[-1, 0], [0, -1], [1, 0], [0, 1]].filter(([xd, yd]) => grid[y + yd] && typeof grid[y + yd][x + xd] === 'number' && grid[y + yd][x + xd] <= height + 1).map(([xd, yd]) => grid[y + yd][x + xd] = { height: grid[y + yd][x + xd], distance: distance + 1, x: x + xd, y: y + yd})); if (stack[0].x === endX && stack[0].y === endY) return stack[0]; return fun(stack.shift(), grid, stack, [endX, endY], fun)}})))

console.log((({grid, start, fun}) => {grid[start[1]][start[0]] = { height: grid[start[1]][start[0]], distance: 0, x: start[0], y: start[1] }; return fun(grid[start[1]][start[0]], grid, [], fun)})(input.trim().split('\n').map(line => line.split('')).reduce((acc, line, y) => ({ grid: [...acc.grid, line.map(char => char === 'S' ? 0 : char === 'E' ? 'z'.charCodeAt(0) - 'a'.charCodeAt(0) : char.charCodeAt(0) - 'a'.charCodeAt(0))], start: acc.start === undefined ? (line.indexOf('E') >= 0 ? [line.indexOf('E'), y] : undefined) : acc.start, fun: acc.fun }), { grid: [], fun: ({height, distance, x, y}, grid, stack, fun) => { stack.push(...[[-1, 0], [0, -1], [1, 0], [0, 1]].filter(([xd, yd]) => grid[y + yd] && typeof grid[y + yd][x + xd] === 'number' && grid[y + yd][x + xd] >= height - 1).map(([xd, yd]) => grid[y + yd][x + xd] = { height: grid[y + yd][x + xd], distance: distance + 1, x: x + xd, y: y + yd})); if (stack[0].height === 0) return stack[0]; return fun(stack.shift(), grid, stack, fun)}})))