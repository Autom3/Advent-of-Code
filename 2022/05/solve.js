const input = require('fs').readFileSync('input.txt', 'utf-8')

console.log((({crates, instructions}) => {instructions.forEach(([count, from, to]) => Array(count).fill().forEach(() => crates[to - 1].push(crates[from - 1].pop()))); return crates})((([top, bottom]) => ({ crates: (crates => crates.reduce((acc, cur) => {cur.forEach((c, i) => c === null ? null : acc[i].unshift(c)); return acc}, Array(crates[0].length).fill().map(() => [])))((top => top.slice(0, -1).map(line => [...line.matchAll(/\w+/g)].reduce((acc, cur) => {acc[(Number(cur.index) - 1) / 4] = cur[0]; return acc}, Array(Number(top[top.length - 1].trim().split(/\s+/).pop())).fill(null))))(top.split('\n'))), instructions: bottom.split('\n').map(line => [...line.matchAll(/\d+/g)].map(([n]) => Number(n)))}))(input.trimEnd().split('\n\n'))).map(arr => arr.pop()).join(''))

console.log((({crates, instructions}) => {instructions.forEach(([count, from, to]) => crates[to - 1].push(...crates[from - 1].splice(-count, count))); return crates})((([top, bottom]) => ({ crates: (crates => crates.reduce((acc, cur) => {cur.forEach((c, i) => c === null ? null : acc[i].unshift(c)); return acc}, Array(crates[0].length).fill().map(() => [])))((top => top.slice(0, -1).map(line => [...line.matchAll(/\w+/g)].reduce((acc, cur) => {acc[(Number(cur.index) - 1) / 4] = cur[0]; return acc}, Array(Number(top[top.length - 1].trim().split(/\s+/).pop())).fill(null))))(top.split('\n'))), instructions: bottom.split('\n').map(line => [...line.matchAll(/\d+/g)].map(([n]) => Number(n)))}))(input.trimEnd().split('\n\n'))).map(arr => arr.pop()).join(''))
